import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn import metrics

# Load the dataset 
data = pd.read_csv('footballscores')

# Display the first few rows of the dataset to understand its structure
print("Dataset Preview:")
print(data.head())

# Extract features (X) and labels (y)
features = data[['home_goals_previous', 'away_goals_previous', 'home_team_rank', 'away_team_rank']]
labels = data[['home_team_score', 'away_team_score']]

# Split the data into training and testing sets
features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size=0.2, random_state=42)

# Standardize the features (optional but often beneficial)
scaler = StandardScaler()
features_train_scaled = scaler.fit_transform(features_train)
features_test_scaled = scaler.transform(features_test)

# Create a linear regression model
model = LinearRegression()

# Train the model
model.fit(features_train_scaled, labels_train)

# Make predictions on the test set
predictions = model.predict(features_test_scaled)

# Evaluate the model using Mean Absolute Error (MAE)
mae = metrics.mean_absolute_error(labels_test, predictions)
print(f'Mean Absolute Error: {mae}')

# Make predictions for a new match
new_match = scaler.transform([[2, 1, 5, 6]])  # Adjust these values based on your new match data
new_match_prediction = model.predict(new_match)
print(f'Predicted Score for the new match: {new_match_prediction[0]}')

# Optionally, save the trained model for future use
# import joblib
# joblib.dump(model, 'football_model.pkl')
